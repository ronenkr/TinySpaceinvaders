/*
 * PCD8544 - Interface with Philips PCD8544 (or compatible) LCDs.
 *
 * Copyright (c) 2010 Carlos Rodrigues <cefrodrigues@gmail.com>
 * Ported to C for use with SDCC 2017 Michael Mayer <michael-mayer@gmx.de>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


#ifdef ARDUINO_ARCH_AVR
# include <avr/pgmspace.h>
#else
# define PROGMEM
# define memcpy_P	memcpy
#endif

//0x03,0x18,0xE0 individual pixels

// The 7-bit ASCII character set...
const PROGMEM unsigned char charset[][10] = {
  { 0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00 },  // 20 space
  { 0xE0, 0x00, 
    0xE0, 0x00,
    0xE0, 0x00, 
    0x00, 0x00, 
    0xE0, 0x00 },  // 21 !
  { 0x18, 0x03, 
    0x18, 0x03, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00 },  // 22 "
  { 0x18, 0x03, 
    0xFB, 0x1B, 
    0x18, 0x03, 
    0xFB, 0x1B, 
    0x18, 0x03  },  // 23 #
  { 0xFB, 0x1B, 
    0xE3, 0x00, 
    0xFB, 0x1B, 
    0xE0, 0x18,
    0xFB, 0x1B    },  // 24 $
  { 0x03, 0x18, 
    0x00, 0x03, 
    0xE0, 0x00, 
    0x18, 0x00, 
    0x03, 0x18  },  // 25 %
  { 0xF8, 0x00, 
    0x03, 0x00, 
    0xF8, 0x18, 
    0x03, 0x03, 
    0xF8, 0x18  },  // 26 &
  { 0xE0, 0x00, 
    0xE0, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00  },  // 27 '
  { 0x00, 0x03, 
    0xE0, 0x00, 
    0xE0, 0x00, 
    0xE0, 0x00, 
    0x00, 0x03  },  // 28 (
  { 0xE0, 0x00, 
    0x00, 0x03, 
    0x00, 0x03, 
    0x00, 0x03, 
    0xE0, 0x00  },  // 29 )
  { 0x03, 0x18, 
    0x18, 0x03, 
    0xFB, 0x1B, 
    0x18, 0x03, 
    0x03, 0x18  },  // 2a *
  { 0xE0, 0x00, 
    0xE0, 0x00, 
    0xFB, 0x1B,  
    0xE0, 0x00, 
    0xE0, 0x00  },  // 2b +
  { 0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0xE0, 0x00, 
    0xE0, 0x00  },  // 2c ,
  { 0x00, 0x00, 
    0x00, 0x00, 
    0xFB, 0x1B, 
    0x00, 0x00, 
    0x00, 0x00  },  // 2d -
  { 0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0xE0, 0x00  },  // 2e .
  { 0x00, 0x03, 
    0x00, 0x03, 
    0xE0, 0x00, 
    0x18, 0x00, 
    0x18, 0x00  },  // 2f /
  { 0xFB, 0x1B,  
    0x03, 0x1B, 
    0xE3, 0x18, 
    0x1B, 0x18, 
    0xFB, 0x1B  },  // 30 0
  { 0xE0, 0x00, 
    0xF8, 0x00, 
    0xE0, 0x00, 
    0xE0, 0x00, 
    0xF8, 0x03  },  // 31 1
  { 0xFB, 0x03, 
    0x00, 0x18, 
    0xF8, 0x03, 
    0x03, 0x00,
    0xFB, 0x1B  },  // 32 2
  { 0xFB, 0x1B, 
    0x00, 0x18, 
    0xF8, 0x03, 
    0x00, 0x18, 
    0xFB, 0x1B  },  // 33 3
  { 0x03, 0x00, 
    0x03, 0x00, 
    0xE3, 0x00, 
    0xFB, 0x1B, 
    0xE0, 0x00  },  // 34 4
  { 0xFB, 0x1B, 
    0x03, 0x00, 
    0xFB, 0x03, 
    0x00, 0x18, 
    0xFB, 0x03  },  // 35 5
  { 0xFB, 0x1B, 
    0x03, 0x00, 
    0xFB, 0x1B, 
    0x03, 0x18, 
    0xFB, 0x1B  },  // 36 6
  { 0xFB, 0x1B, 
    0x00, 0x18, 
    0x00, 0x03, 
    0xE0, 0x00, 
    0xE0, 0x00  },  // 37 7
  { 0xFB, 0x1B, 
    0x03, 0x18, 
    0xFB, 0x1B, 
    0x03, 0x18,  
    0xFB, 0x1B  },  // 38 8
  { 0xFB, 0x1B, 
    0x03, 0x18, 
    0xFB, 0x1B, 
    0x00, 0x18, 
    0xFB, 0x1B  },  // 39 9
  { 0xE0, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0xE0, 0x00, 
    0x00, 0x00  },  // 3a :
  { 0x00, 0x00, //0xE0, 0x00, 
    0x00, 0x00, //0x00, 0x00, 
    0xFB, 0xFB, //0x00, 0x00, 
    0x00, 0x00, //0xE0, 0x00, 
    0x00, 0x00 }, //0xE0, 0x00  },  // 3b ; hijacked it for horizontal line drawing
  { 0x00, 0x03, 
    0xE0, 0x00, 
    0x18, 0x00, 
    0xE0, 0x00, 
    0x00, 0x03  },  // 3c <
  { 0x00, 0x00, 
    0xFB, 0x1B, 
    0x00, 0x00, 
    0xFB, 0x1B, 
    0x00, 0x00  },  // 3d =
  { 0x18, 0x00, 
    0xE0, 0x00, 
    0x00, 0x03, 
    0xE0, 0x00, 
    0x18, 0x00  },  // 3e >
  { 0xE0, 0x03, 
    0x18, 0x18, 
    0x00, 0x03, 
    0x00, 0x00, 
    0x00, 0x03  },  // 3f ?
  { 0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00, 
    0x00, 0x00  },  // 40 @
  { 0xFB, 0x1B, 
    0x03, 0x18, 
    0x03, 0x18, 
    0xFB, 0x1B,  
    0x03, 0x18  },  // 41 A
  { 0xFB, 0x1B, 
    0x03, 0x18, 
    0xFB, 0x03, 
    0x03, 0x18, 
    0xFB, 0x1B  },  // 42 B
  { 0xFB, 0x1B, 
    0x03, 0x00, 
    0x03, 0x00, 
    0x03, 0x00, 
    0xFB, 0x1B  },  // 43 C
  { 0xFB, 0x03, 
    0x03, 0x18, 
    0x03, 0x18, 
    0x03, 0x18, 
    0xFB, 0x03  },  // 44 D
  { 0xFB, 0x1B, 
    0x03, 0x00, 
    0xFB, 0x03, 
    0x03, 0x00, 
    0xFB, 0x1B  },  // 45 E
  { 0xFB, 0x1B, 
    0x03, 0x00, 
    0xFB, 0x03, 
    0x03, 0x00, 
    0x03, 0x00  },  // 46 F
  { 0xFB, 0x1B, 
    0x03, 0x00, 
    0x03, 0x1B, 
    0x03, 0x18, 
    0xFB, 0x1B  },  // 47 G
  { 0x03, 0x18, 
    0x03, 0x18, 
    0xFB, 0x1B, 
    0x03, 0x18, 
    0x03, 0x18  },  // 48 H
  { 0xFB, 0x1B, 
    0xE0, 0x00, 
    0xE0, 0x00, 
    0xE0, 0x00, 
    0xFB, 0x1B  },  // 49 I
  { 0x00, 0x1B, 
    0x00, 0x18, 
    0x00, 0x18, 
    0x03, 0x18, 
    0xFB, 0x1B  },  // 4a J
  { 0x03, 0x18, 
    0x03, 0x03, 
    0xFB, 0x00, 
    0x03, 0x03, 
    0x03, 0x18  },  // 4b K
  { 0x03, 0x00, 
    0x03, 0x00, 
    0x03, 0x00, 
    0x03, 0x00, 
    0xFB, 0x1B  },  // 4c L
  { 0x03, 0x18, 
    0x1B, 0x1B, 
    0xE3, 0x18, 
    0x03, 0x18, 
    0x03, 0x18  },  // 4d M
  { 0x03, 0x18 , 
    0x1B, 0x18, 
    0xE3, 0x18, 
    0x03, 0x1B, 
    0x03, 0x18  },  // 4e N
  { 0xF8, 0x03, 
    0x03, 0x18, 
    0x03, 0x18, 
    0x03, 0x18, 
    0xF8, 0x03  },  // 4f O
  { 0xFB, 0x03, 
    0x03, 0x18, 
    0xFB, 0x03, 
    0x03, 0x00, 
    0x03, 0x00  },  // 50 P
  { 0xFB, 0x1B, 
    0x03, 0x18, 
    0x03, 0x18, 
    0xFB, 0x1B, 
    0xE0, 0x00  },  // 51 Q
  { 0xFB, 0x03, 
    0x03, 0x18, 
    0xFB, 0x03, 
    0x03, 0x18, 
    0x03, 0x18  },  // 52 R
  { 0xFB, 0x1B, 
    0x03, 0x00, 
    0xFB, 0x1B, 
    0x00, 0x18, 
    0xFB, 0x1B  },  // 53 S
  { 0xFB, 0x1B, 
    0xE0, 0x00, 
    0xE0, 0x00, 
    0xE0, 0x00, 
    0xE0, 0x00  },  // 54 T
  { 0x03, 0x18, 
    0x03, 0x18, 
    0x03, 0x18, 
    0x03, 0x18, 
    0xFB, 0x1B  },  // 55 U
  { 0x03, 0x18, 
    0x03, 0x18, 
    0x18, 0x03, 
    0x18, 0x03, 
    0xE0, 0x00  },  // 56 V
  { 0x03, 0x18, 
    0x03, 0x18, 
    0xE3, 0x18, 
    0xE3, 0x18, 
    0x18, 0x03  },  // 57 W
  { 0x03, 0x18, 
    0x18, 0x03, 
    0xE0, 0x00, 
    0x18, 0x03, 
    0x03, 0x18 },  // 58 X
  { 0x03, 0x18, 
    0x03, 0x18, 
    0x18, 0x03, 
    0xE0, 0x00, 
    0xE0, 0x00  },  // 59 Y
  { 0xFB, 0x1B, 
    0x00, 0x03, 
    0xE0, 0x00, 
    0x18, 0x00, 
    0xFB, 0x1B  },  // 5a Z
  { 0xF8, 0x00, 
    0x18, 0x00, 
    0x18, 0x00, 
    0x18, 0x00, 
    0xF8, 0x00  },  // 5b [
  { 0x18, 0x00, 
    0x18, 0x00, 
    0xE0, 0x00, 
    0x00, 0x03, 
    0x00, 0x03  },  // 5c backslash 
  { 0xE0, 0x03, 
    0x00, 0x03, 
    0x00, 0x03, 
    0x00, 0x03, 
    0xE0, 0x03  },  // 5d ]
  { 0xFB, 0x1B, 
    0xFB, 0x1B, 
    0xFB, 0x1B, 
    0xFB, 0x1B, 
    0xFB, 0x1B  }  // 5e ^
  
  
};


/* vim: set expandtab ts=4 sw=4: */
